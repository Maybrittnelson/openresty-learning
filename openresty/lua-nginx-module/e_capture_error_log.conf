#
events{}

http {

    lua_package_path "${prefix}?.lua;;";
    lua_capture_error_log 32m;
    init_by_lua_block {
        require "libs/share"

        local errlog = require "ngx.errlog"
        -- If we don't call this API, all of the error logs will be captured by default.
        -- 失败时，status的值为nil
        -- 如果不设置，默认会捕获error.log文件中所有的日志
        local status, err = errlog.set_filter_level(ngx.WARN)
        if not status then
           ngx.log(ngx.ERR, err)
           return
        end
        ngx.log(ngx.WARN, "set error filter level: WARN")
    }

    server {
        location /err {
            content_by_lua_block {
                share.val = share.val + 1
                ngx.log(ngx.ERR, share.val)
            }
        }
    }

    server {
        listen 8001;
        location / {
            content_by_lua_block {
                local errlog = require "ngx.errlog"
                local res = errlog.get_logs(2)
                ngx.say(res)
            }
        }
    }
}
