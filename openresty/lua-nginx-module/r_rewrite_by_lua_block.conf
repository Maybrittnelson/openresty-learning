#
# 与set_by_lua_block的区别：
#   1. 可以发起子请求，因为在set_by_lua中任何调用yield的函数都被禁止。包括ngx.location.capture
#   2. 创建一个新的协程执行rewrite_by_lua中的代码
#
# 2. Note that when calling ngx.exit(ngx.OK) within a rewrite_by_lua handler, the nginx request processing control flow will still continue to the content handler.
#    这也是ngx.OK和ngx.HTTP_OK的区别
#
events {}

http {


    # rewrite_by_lua可以发起子请求
    server {
        location / {
            rewrite_by_lua_block {
                res = ngx.location.capture("/test")
            }
            proxy_pass http://localhost:9000;
        }
    }

    server {
        listen 9000;
        location / {
            echo "9000 nihao";
        }
    }

    # 添加了rewrite_by_lua_no_postpone指令以后，就会顺序执行，所以会返回503错误
    rewrite_by_lua_no_postpone on;
    server {
        listen 8001;
        location / {
            # break 与 last 之间的区别
            rewrite_by_lua_block {
                ngx.exit(ngx.HTTP_OK)
            --    return ngx.HTTP_OK    -- 没什么用
            }
            rewrite ^ /bar last;
        }

        location /bar {
            echo "bar";
        }
    }


    # 注意不是return ngx.OK
    # 注意ngx.OK 与 ngx.HTTP_OK 之间的区别
    server {
        listen 8002;
        location / {
            # break 与 last 之间的区别
            rewrite_by_lua_block {
                ngx.exit(ngx.OK);
            }
            echo "nihao";
        }
    }
}
