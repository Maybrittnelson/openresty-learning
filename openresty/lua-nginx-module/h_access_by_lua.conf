# 1. a new spawned coroutine in an independent global environment
# 2. 在access tail阶段被被执行，access_by_lua_no_postpone可以使得它在acess阶段被执行
# 3. ngx_http_access_module拥有deny和access指令，它们可以和access_by_lua无缝结合使用。
#    只有当access模块的指令通过验证，access_by_lua的代码才会被调用
# 4. NOTE: access_by_lua will not run in subrequests

events {}

http {
    # 解释：As with other access phase handlers, access_by_lua will not run in subrequests.
    server {
        location /sub {
            # allow 127.0.0.1;
            deny all;
            access_by_lua_block {
                ngx.log(ngx.INFO, "sub location")
            }
            echo $uri;
        }

        # 1. 通过该location发送子请求到sub时，access阶段的指令不再被执行，直接到content阶段
        location / {
            content_by_lua_block {
                res = ngx.location.capture("/sub")
                ngx.say(res.body)
            }
        }
    }

    # 解释rewrite发起的请求不是子请求，而是内部(HTTP请求没有过网卡)主请求(rewrite不返回)
    # 证明：rewrite发送的请求时内部主请求
    server {
        listen 8001;
        location /sub {
            allow 127.0.0.1;
            deny all;
            access_by_lua_block {
                ngx.log(ngx.INFO, "sub location")
            }
            echo $uri;
        }

        location / {
            # 对所有请求都进行rewrite, 新的url都是/sub
            rewrite / /sub;
        }
    }
}
