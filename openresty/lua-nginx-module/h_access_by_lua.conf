#
# 1. a new spawned coroutine in an independent global environment
# 2. 在rewrite阶段后被执行，但是也是在access tail阶段被执行
# 3. ngx_http_access_module拥有deny和access指令，它们可以和access_by_lua无缝结合使用。
#    只有当access模块的指令通过验证，access_by_lua的代码才会被调用
# 4. Note that when calling ngx.exit(ngx.OK) within a rewrite_by_lua handler, the nginx request processing control flow will still continue to the content handler.
#    这也是ngx.OK和ngx.HTTP_OK的区别
# 5. access_by_lua will not run in subrequests
# 6.  access_by_lua_no_postpone 指令
events {}

http {
    init_by_lua_block {
        m = {}
    }
    server {
        location / {
            allow 127.0.0.1;
            deny all;
            access_by_lua_block {
                m.name = "jack"
            }

            content_by_lua_block {
                ngx.say(m.name)
            }
        }
    }
}
