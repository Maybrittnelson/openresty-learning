#
# 通过LUA***全局变量***在worker的各个routine之间进行数据共享，貌似不是一个好主意
# 目前测试来看，出现了各种奇怪的问题
# NOTE: 详细分析参见b_ngx_lua_share_interpreter.conf
events{}

http {
    lua_package_path "${prefix}?.lua;;";
    server {
        # NOTE: 当第二个请求到来时，所有的全局变量都被设置为了nil。
        # 这导致setname调用失败
        location /case1 {
            content_by_lua_block {
                require "libs/global"
                --setname("bob")      -- 第二次被调用时报错，程序返回500
                ngx.say("global name: ", name)  -- 第二次被调用时返回nil
            }
        }

        # NOTE: lua-ngx对全局变量进行了隔离.
        #   1. 第一次执行require函数时，将全局变量赋值给该routine；
        #   2. 第二次执行require函数时，由于在loaded module table中找到了该模块，不会执行该模块，也就不会将全局变量赋值为routine.
        #   3. 如果val = require "..." 模式，require可以将一个全局变量再次赋值给routine
        location /case2 {
            content_by_lua_block {
                name = require "libs/global"
                ngx.say("global name: ", name)  -- 每次都会返回jack
            }
        }
    }

    server {
        listen 8001;
        # 1. require一个模块时只会执行一次；
        # 2. 模块内部的require也是按照case2的逻辑执行
        # NOTE: 如果先执行/case1加载一次global.lua文件;
        #       再执行/case3时，require语句就会被忽略, add或sub函数内的count就为nil.
        # 3. 如果先执行/case3, 全局变量会被赋值给routine. add/sub函数第一次执行时，按照LEGB原则
        # 找到count的值，并永久性地与该变量(注意不是与内存地址)黏在了一起.
        location /case3 {
            content_by_lua_block {
                local var = require "libs/global2"
                count = 20
                ngx.print(var.add())
            }
        }

        location /case4 {
            content_by_lua_block {
                local var = require "libs/global2"
                count = 40      -- count值与case3, case4的执行先后顺序有关，先执行case3，该语句无效
                ngx.print(var.sub())
            }
        }
    }
}
