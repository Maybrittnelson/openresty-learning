events{}

http {
    server {
        location / {
            set $val "nihao";
            # 不能凭空创建var.xxx变量，因为ngx.var.xxx是与Nginx变量一一对应的，而Nginx变量是必须在配置期间就被定义的
            # 即，在worker运行过程中不允许创建新的Nginx变量。所以不能凭空创建ngx.var.xxx
            # NOTICE: 如果向ngx.var.xxx写数据，会导致LUA协程异常退出；如果读ngx.var.xxx数据，那么返回nil
            # NOTICE: Nginx未定义的变量，lua输出为nil；Nginx定义但未初始化的变量，LUA输出为空字符串
            # NOTICE: 不要通过Nginx变量在各个阶段传递数据，因为LUA读取数据时还是要花费一些CPU的，在关键路径上也尽量少用ngx.var.xxx的形式
            content_by_lua_block {
                ngx.say(ngx.var.arg_d)
                ngx.say(ngx.var.mm)
                ngx.say(ngx.var.val)
                ngx.var.val = nil -- 删除该变量，下面的输出就是nil
                ngx.say(ngx.var.val)
                --[[
                    NOTICE: When reading from an Nginx variable, Nginx will allocate memory in the per-request memory pool which is freed only at request termination.
                    NOTICE NOTICE NOTICE: 即使同一个变量ngx.var.xxx被调用多次，也会allocate多快临时内存，造成了内存泄漏
                    解决办法是使用lua变量或ngx.ctx将它的值缓存在LUA中
                --]]
                local val = ngx.var.arg_d
                ngx.say(val)
            }
        }

        # 解释nax.var[1] 是怎么一回事
        location ~ /(.*).jpg {
            content_by_lua_block {
                ngx.say(ngx.var[1])
            }
        }
    }
}
