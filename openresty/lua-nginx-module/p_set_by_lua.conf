#
# set_by_lua并非指运行在set阶段，也不存在这样的一个阶段。set_by_lua和rewrite_by_lua都是运行在rewrite阶段，区别如下：
#   1. set_by_lua运行在rewrite阶段, 可以和其他rewrite模块一块使用(这是set_by_lua指令设计的初衷)，conf中的顺序就是这些指令执行的顺序。
#   2. rewrite_by_Lua执行在rewrite阶段的末尾
#
# NOTE: set_by_lua $res <lua-script-str> [$arg1 $arg2 ...]]
# 该指令接收输入返回输出，像是执行了一个Lua函数似的。这给ngx_lua在rewrite阶段提供了编写lua代码的能力
# 1. The code in <lua-script-str> can make API calls
# 2.  retrieve input arguments from the ngx.arg table
#
# NOTE: set_by_lua是将Lua脚本注入到ngx_http_rewrite_module的模块内，才有了可以与该模块混合使用的能力。但这也限制了set_by_lua脚本的使用
# Because ngx_http_rewrite_module does not support nonblocking I/O in its commands。 所以调用阻塞式IO接口，肯定block住worker; nonblocking IO又不支持.
# So, This directive is designed to execute short, fast running code blocks.
# 猜测，这时还没有创建coroutine.
#
# NOTE: 不是所有的ngx_lua_api是支持的.
#

events{}

http {
    server {
        location / {
            # NOTE: 需要事先在nginx环境下定义该变量, 否则报错500
            set $diff '';
            set_by_lua_block $sum {     -- 只能输出一个值
                local a = 32
                local b = 50
                ngx.var.diff = a - b;
                return a+b
            }

            content_by_lua_block {
                ngx.say("diff=", ngx.var.diff)
                ngx.say("sum=", ngx.var.sum)
            }
        }
    }

    init_by_lua_block {
        ngx.log(ngx.INFO, "routine: " .. tostring(coroutine.running()))
    }

    init_worker_by_lua_block {
        ngx.log(ngx.INFO, "routine: " .. tostring(coroutine.running()))
        name="XX"
    }

    # 验证set_by_lua block在coroutine环境下还是全局环境下执行
    # NOTE:NOTE:NOTE: 注意init_by_lua, init_worker_by_lua, set_by_lua, header_filter_by_lua, body_filter_by_lua, log_by_lua 是在主协程下运行。
    # NOTE:NOTE:NOTE: rewrite_by_lua, access_by_lua, content_by_lua三个阶段使用了**独立**的协程进行处理
    # NOTE:NOTE:NOTE: 在server内的XX_by_lua虽然会复用主协程，但是ngx_lua还是会进行全局变量隔离
    server {
        listen 8001;
        location / {

            # 每次都返回的是alice，表明每次请求到来时found的值都为nil.
            # set_by_lua_block内定义的全局变量found, name会被隔离
            set_by_lua_block $res {
                if found ~= nil then
                    name = "bob"
                    ngx.log(ngx.INFO, "log_by_lua_block routine: " .. name)
                else
                    name = "alice"
                    ngx.log(ngx.INFO, "log_by_lua_block routine: " .. name)
                    found = true
                end

                ngx.log(ngx.INFO, "set_by_lua_block routine: " .. tostring(coroutine.running()))
                return ""
            }

            rewrite_by_lua_block {
                ngx.log(ngx.INFO, "rewrite_by_lua_block routine: " .. tostring(coroutine.running()))
            }

            access_by_lua_block {
                ngx.log(ngx.INFO, "access_by_lua_block routine: " .. tostring(coroutine.running()))
            }

            content_by_lua_block {
                ngx.log(ngx.INFO, "content_by_lua_block routine: " .. tostring(coroutine.running()))
                ngx.say("helloworld")
            }

            header_filter_by_lua_block {
                ngx.log(ngx.INFO, "header_filter_by_lua_block routine: " .. tostring(coroutine.running()))
            }

            body_filter_by_lua_block {
                ngx.log(ngx.INFO, "body_filter_by_lua_block routine: " .. tostring(coroutine.running()))
            }

            # name被隔离，所以这里的name为nil
            log_by_lua_block {
                ngx.log(ngx.INFO, "log_by_lua_block routine: " .. tostring(coroutine.running()))
                ngx.log(ngx.INFO, "log_by_lua_block routine: " .. name)
            }
        }
    }
}
