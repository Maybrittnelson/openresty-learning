#
# NOTICE: Some API functions are currently disabled within this context.
#    主要是与yield调用相关的函数，当然也包括socket通信
#
events{}

http {
    server {
        location / {
            # NOTE: 无论是echo还是ngx.say，默认输出方式都是chunked-transfer-encoding
            # NOTE: 每个ngx.say或echo指令都会产生一个chunk data.
            content_by_lua_block {
                ngx.say("mm nn")
                ngx.say("hello--world")
            }

            # 1. arg[1]表示 input data chunk，如果有多个chunk，body_filter_by_lua_block会被调用多次.
            #    通过tcpdump就能看出nginx输出了两个chunk
            #
            # 2. NOTE: body_filter_by_lua_block要想被使用，必须使用chunked-transfer-encoding的方式传输数据。
            #    如果有content-length头，需要在header_filter_by_lua中删除。
            #    header_filter_by_lua 'ngx.header.content_length = nil';
            body_filter_by_lua_block {
                local chunk = ngx.arg[1]
                ngx.log(ngx.INFO, chunk)

                -- 下面的逻辑是说：如果当前chunk不包含hello，那么就不要输出该chunk
                -- NOTE: ngx.arg[2] == true 表示这是最后一个truck
                if string.match(chunk, "hello") then
                    ngx.arg[2] = true
                    return
                end
                ngx.arg[1] = nil    -- 忽略该chunk
            }
        }
    }
}
