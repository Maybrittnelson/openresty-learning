#
# 1. 每一个request都拥有一个独立的coroutine；
# 2. 一个worker只有一个Lua解释器
#
events{}

http {
    # init_by_lua_block {
    #    num = num or 0
    #}

    # 1. 通过下面的方式共享变量失败，如果没有init_by_lua_block，新的请求到来是，num被初始化为nil
    # 2. init_by_lua_block设置完以后，每次num的值都是0
    # NOTE:  Note however that Lua global variables (note, not module-level variables) WILL NOT
    # persist between requests because of the one-coroutine-per-request isolation design.)
    server {
        location /show {
            content_by_lua_block {
                ngx.print(num)
            }
        }

        location /add {
            content_by_lua_block {
                num = num + 1
            }
        }
    }

    # 加载一个外部模块，外部模块是共享的
    lua_package_path "${prefix}?.lua;;";
    init_by_lua_block {
        require "libs/share"
        require "libs/share2"
    }

    # libs/share2.lua
    # by design, the global environment has exactly the same lifetime as the Nginx request handler associated with it.
    # Each request handler has its own set of Lua global variables
    # lua-nginx-module的请求隔离方式是采用每个请求都有自己独立的全局变量
    # 即：若全局变量是值类型，则每个请求都拥有独立的值；若全局变量是引用类型，则请求共享引用
    server {
        listen 8001;
        location /show {
            content_by_lua_block {
                ngx.print(val)
                ngx.print(tab.age)
            }
        }

        location /add {
            content_by_lua_block {
                val = val + 1
                tab.age = tab.age + 1
            }
        }
    }

    # libs/share.lua模块中的val虽然没有local限制，但是也是模块级变量
    # 模块级变量是共享的
    server {
        listen 8002;
        location /show {
            content_by_lua_block {
                ngx.print(share.val)
            }
        }

        location /add {
            content_by_lua_block {
                share.val = share.val + 1
            }
        }
    }
}
