# 1. can work with any existing nginx upstream modules like ngx_proxy and ngx_fastcgi.
#    它们被称为nginx upstream modules
#
# 2. 兼容ngx_http_upstream_module的keepalive指令，即balancer_by_lua支持与后端保持长链接
#    NOTICE: ensure that the keepalive directive is used after this balancer_by_lua_block
#
# 3. balancer_by_lua可以从server指令指定的静态backend中选择，
#    也可基于ngx.balancer module from the lua-resty-core library从动态server list中选择
#    NOTICE: 从中可以看到lua-resty-core库的重要性，关键是它是由LUA写的
#
# 4. 根据nginx upstream modules的标准，当某个后端无法处理该请求时，该请求会被重试，所以
#    balancer_by_lua的指令就可能会被执行多次(在一个请求过程中).
#
# 5. This Lua code execution context does not support yielding.
#
events{}

http {
    # 1. 处在upstream的上下文当中
    # 2. 无论选择哪一个upstream server，balancer_by_lua_block都会被执行
    # 3. 如果根据proxy_next_upstream的配置策略，Nginx需要再次转发该请求给另一个upstrema时，也会执行balancer_by_lua_block
    upstream foo {
        server 0.0.0.1;   # just an invalid address as a place holder
        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local host = "127.0.0.1"
            local port = 9000

            -- NOTE: 下面的函数不会去探测9000端口是否有服务在监听，所以无论是否存在后端服务
            -- 该函数都可以成功返回
            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        # 确保在balancer_by_lua_block之后
        keepalive 10;
    }

    server {
        location / {
            proxy_pass http://foo;
        }
    }

    server {
        listen 9000;
        location / {
            echo "9000";
        }
    }
}
