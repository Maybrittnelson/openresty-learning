#
# Reads the client request body synchronously without blocking the Nginx event loop.
#
events{}

http {
    # the request body has zero size
    server {
        lua_need_request_body on;
        client_body_buffer_size 1m;
        client_max_body_size    1m;
        location / {
            content_by_lua_block {
                data = ngx.req.get_body_data()
                if data == nil then
                    -- ngx.say一旦执行，那么response code就定了，所以ngx.status放在前面很重要
                    ngx.status = ngx.HTTP_NOT_FOUND
                    ngx.say([[the request body has not been read
or the request body has been read into disk temporary files,
or the request body has zero size.
                    ]])
                    -- 直接ngx.exit(ngx.HTTP_NOT_FOUND), 貌似是不起作用的
                    ngx.exit(ngx.OK)    -- 省略的话，则会执行ngx.say(data)
                end
                ngx.say(data)
            }
        }
    }

    # the request body has not been read
    server {
        listen 8001;
        location / {
            content_by_lua_block {
                data = ngx.req.get_body_data()
                assert(data == nil)
            }
        }
    }

    # the request body has been read into disk temporary files
    server {
        listen 8002;
        lua_need_request_body on;
        client_body_buffer_size 1;  # 这里的设置貌似并没有起作用
        client_max_body_size    15; # work
        client_body_in_file_only on;    # 强制缓存到文件
        location / {
            content_by_lua_block {
                data = ngx.req.get_body_data()
                assert(data == nil)
            }
        }
    }

    # 使用ngx.req.read_body读取数据
    server {
        listen 8003;
        location / {
            content_by_lua_block {
                -- Reads the client request body synchronously without blocking the Nginx event loop.
                ngx.req.read_body()
                data = ngx.req.get_body_data()
                ngx.say(data)
            }
        }
    }

    # 读取并解析
    # curl -v --data "name=jack&age=10"  '127.0.0.1:8004'
    server {
        listen 8004;
        location / {
            content_by_lua_block {
                ngx.req.read_body()
                args = ngx.req.get_post_args()
                ngx.say(args.name)
                ngx.say(args.age)
            }
        }
    }
}
