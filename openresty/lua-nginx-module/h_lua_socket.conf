#
# cosocket的作者是春哥，cosocket = coroutine + socket。
# 任何一个cossocket函数的调用都涉及：将IO event添加到Nginx的事件循环机制中；yield释放CPU；Nginx事件发生，数据已就绪，协程被唤醒。
# 以此为蓝板，封装实现 connect、read、recieve等操作，形成了大家目前所看到的cosocket API
# NOTICE: cosocket 对象是全双工的,即可以有两个协程，一个从cossocket对象读数据，一个从cossocket写数据，但是不允许两个协程同时读或写。
# 它是同步的；
# 它是非阻塞的；
# 它是全双工的
#
# 1. lua_socket_connect_timeout 60: 设置TCP套接字connect的超时时间
# 2. lua_socket_send_timeout 60: 设置TCP套接字send的超时时间
# 3. lua_socket_read_timeout 60: 设置TCP套接字read的超时时间
# 4. lua_socket_send_lowat 0: controls the lowat (low water) value for the cosocket send buffer.
#    NOTICE: https://my.oschina.net/yangan/blog/185262
#    每个套接口都有一个接收低潮限度和一个发送低潮限度。当epoll监听到某一个socket的接受缓冲区的数据超过了接受低潮限度，则触发读就绪；
#    当epoll监听到某个socket的发送缓冲区小于低潮限度，则触发写就绪。
#    默认值表明：只有socket的数据发送完毕，才允许用户继续向socket写。
#
# 5. lua_socket_buffer_size 4k/8k: Specifies the buffer size used by cosocket reading operations.
#    cosocket采用“流式”读写数据：即它从cosocketA读取部分数据到缓冲区，然后立即将数据发送到cosocketB中。所以缓冲区的最小值可为1。
#    默认值是一个页面
#
# 6. lua_socket_pool_size 30
#    NOTICE: cosocket connection pool 是指到某一个backend server的连接池。所以每一个backend server都可能会有cosocket connection pool
#    当到某个backend server的连接数超过了该size，采用LRU(least recently used)算法
#    NOTICE: Note that the cosocket connection pool is per nginx worker process。所以size是针对每一个worker实例的
#
# 7. lua_socket_keepalive_timeout 60s
#    NOTICE: lua socket connection pool 中的连接是keepalived，当超过了指定时间后，关闭该连接，并将它从连接池中删除
#
# 8. lua_socket_log_errors on
#    当cosocket出现错误时，记录日志和并flush日志。作者建议当对cosocket函数返回值做了正确的检查和处理，最好能将它关掉
#
# 9. lua_http10_buffering
#    先对响应进行全部缓存，然后设置content-length，最后返回。所以当response body很大时，很危险。
#
# 10. lua_check_client_abort off
#    这个配置与之前的不一样，它是检查与downstream的连接情况。一旦client端断开连接：
#    默认行为：销毁所有与该连接相关的coroutine；可选行为：调用callback handler。
#    NOTICE：如果在LUA读取request body完毕之前，连接被关闭，以上的行为不会被触发。cosocket函数只会返回读失败
#    NOTICE：When TCP keepalive is disabled, it is relying on the client side to close the socket gracefully.
#    即，若keepalive被设置，即使client过早关闭连接（甚至由于socket关闭不合法，导致服务器端socket处于half-close状态），也能保证cossocket迟早被关闭；
#    即，若keepalive未被设置，那么处于half-close状态的连接就需要被即时detect到，然后触发上面的行为。
#    NOTICE NOTICE NOTICE：listen 80 so_keepalive=2s:2s:8;
#
# 11. lua_max_pending_timers
#    不允许通过ngx.timer.at注册新的timer
#
#  12. lua_max_running_timers
#    不允许回调函数被执行。只要时间上错得开，而且允许timer的回调函数偶尔没有被执行，那就可通过ngx.timer.at设置更多的timer
