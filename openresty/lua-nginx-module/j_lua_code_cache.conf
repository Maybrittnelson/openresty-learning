#
# enable or disable the Lua code cache for Lua code in *_by_lua_file directives
# NOTICE：上面是指*_by_lua_file，此时所有的lua code都是放在lua文件当中，包括lua模块文件在内。lua_code_cache on时所有lua文件都会被缓存，off时所有都不会被缓存。
# NOTICE: 如果是*_by_lua_block指令，这些lua代码是写在nginx.conf当中，而且肯定会被缓存起来。只有通过reload才能使这部分代码生效(lua_code_cache off 不管用)。
#         block内通过require指令引入的模块，在lua_code_cache on时被缓存；off时不被缓存。
# NOTICE: 通过dofile or loadfile函数加载的lua模块是不会被缓存的, 这些模块应该在init_by_lua_file内加载，并将结果缓存下来.
#
# When turning off, every request served by ngx_lua will run in a separate Lua VM instance
# NOTICE: lua_code_cache off 主要是为了帮助开发人员开发代码，代码即时生效

events{}

http {
    lua_package_path "${prefix}?.lua;;";     # 可用${prefix}选项

    server {
        location / {
            lua_code_cache off; # 可以设置在location级别
            content_by_lua_block {
                -- helloworld模块每次都会被重新加载, 它的ngx.say可以重新加载
                require "libs/helloworld"
                -- 无法动态更新
                ngx.say("in Block")
            }
        }
    }

    server {
        listen 8001;
        location / {
            lua_code_cache off; # 可以设置在location级别
            content_by_lua_file "libs/helloworld.lua";
        }
    }

}
