events{}
#
# NOTE: NOTE: init_by_lua的代码是在Lua VM的全局环境下执行的. 其它XX_by_lua都是在函数级别下（coroutine下）执行的
#
# 时机：master加载nginx.conf, 创建Nginx worker之前.
# 每个worker都有一个独立的Lua VM，这个Lua VM也是从master process继承而来的. 这样可以充分利用copy-on-write技术，减少内存的占用.
#   1. ngx_module也会创建一个新的Lua VM
#   2. 执行init_by_lua指定的模块
#   3. 创建worker process子进程，继承2中的Lua VM.
#
# NOTE: 如果lua_code_cache off时，每当请求到来时，ngx_lua继承1中的Lua VM, 并建立新的Lua VM环境。所以，
# the init_by_lua handler will run upon every request.
#
# init_by_lua主要用来：
#   1. 预加载模块. 因为它在创建worker之前执行，现代操作系统的copy-on-write功能帮助减少内存的使用；
#   2. 利用lua_shared_dict变量，定义server级别共享的变量；
#   3. 在该阶段执行BLock IO相关的操作
#
# NOTE: 不要在ngx_lua中使用全局变量, 如果一定要使用，请在这里设置.
# 参见：c_data_sharing_using_global_variable.conf 和 b_ngx_lua_share_interpreter.conf
#
# NOTE: Only a small set of the Nginx API for Lua is supported in this context
# nginx的API可用的不多，有 ngx.log，ngx.shared.DICT.
#
# NOTE: 在此执行期间，LUA代码的权限是root
#

http {
    lua_package_path "${prefix}?.lua";
    lua_shared_dict dogs 1m;
    # NOTICE：在init_by_lua中执行时，代码是在全局环境下执行，所有的协程都能够共享在这里定义的全局变量
    init_by_lua_block {
        require "libs/init_by_lua"
        dogs = ngx.shared.dogs;     -- reload 期间dogs内存不会被清除，数据都在
        --[[
        -- 相当于一个flag，表明reload时是否期望后面的代码被执行。
        -- 因为reload时VM重启，init_by_lua_block会重新被执行
        --]]
        if dogs:get("Tom") ~= nil then
            return
        end
        dogs:set("Jack", 100)
    }

    server {
        location / {
            content_by_lua_block {
                -- require "libs/init_by_lua"  -- init_by_lua模块定义的全局变量被ngx_lua装载为coroutine的局部变量
                a = a + 1
                ngx.say(a)
            }
        }
    }

    server {
        listen 8001;
        location / {
            content_by_lua_block {
                ngx.say(dogs:get("Jack"))
                dogs:set("Jack", "nihao")
                dogs:set("Tom", true)
            }
        }
    }
}
