#
# 1. ngx.location.capture会发起一个subrequest
# 2. Almost all the Nginx modules can be used with this ngx_lua module by means of ngx.location.capture or ngx.location.capture_multi
#    通过前面的两个Lua函数，可以发起子请求，这相当于ngx-lua-module与nginx模块的粘合剂.
#    NOTE: lua-resty-*模块也提供了类似nginx模块的功能，建议直接使用lua-resty-*
#
events{}

http {
    lua_package_path "${prefix}?.lua;;";

    # case 1
    server {
        location / {
            # NOTE: 不允许在capture.lua模块的顶层调用ngx.location.capture命令.
            # ERROR： The require function is implemented as a C function, which cannot be
            # yielded in the middle of the require call.
            # 我们猜测：因为nginx-lua-module的IO都是非阻塞的，ngx.location.capture发送完请求后，会yield来释放资源
            content_by_lua_block {
                require "libs/capture"
            }
        }

        location /capture {
            echo "subrequest";
        }
    }

    # case 2
    server {
        listen 8001;
        location / {
            content_by_lua_block {
                local res = ngx.location.capture("/capture")
                ngx.print(res.body)
            }
        }

        location /capture {
            echo "case 2";
        }
    }

    # case 3
    server {
        listen 8002;
        location / {
            content_by_lua_block {
                capture = require "libs/capture2"
                local res = capture()
                ngx.print(res.body)
            }
        }

        location /capture {
            echo "case 3";
        }
    }
}
