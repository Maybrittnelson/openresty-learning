#
# User "light threads" can create "light threads" themselves.
# And normal user coroutines created by coroutine.create can also create "light threads"
# 协程之间拥有父子概念，只有父进程可以调用ngx.thread.wait来等待子进程执行结束
#
# 子进程变成僵尸进程的三个条件：
#   1. the current "light thread" already terminates (either successfully or with an error),
#   2. its parent coroutine is still alive, and
#   3. its parent coroutine is not waiting on it with ngx.thread.wait.
#
# 当整个handler完成以后，相信ngx_lua会回收这些僵尸协程的
#
events{}

http {
    server {
        location / {
            rewrite_by_lua_file libs/thread3.lua;
        }
    }
}
