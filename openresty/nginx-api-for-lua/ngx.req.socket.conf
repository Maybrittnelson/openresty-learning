#
# 1. ngx.req.socket并非创建了新的连接，而是对底层连接的封装. 支持**流式**读写
# 2. Only receive, receiveuntil and send methods are supported on this object
# 3. 返回tcpsock, 通过该**同步非阻塞**套接字可以重新构建在传输层之上的**通信协议**
#    即：读写操作都是在TCP层，而非在HTTP层
# 4. sock = ngx.req.socket() 返回只读套接字，sock = ngx.req.socket(true) 返回读写套接字
#
# 5. 只读套接字主要用来**流式**的读取和处理请求, 与lua_need_request_body，ngx.req.read_body或ngx.req.discard_body互斥.
#    只读套接字无法读取chunked body.
#
# 6. pending data: 是指ngx.say()或ngx.print()调用而产生的数据并没有写到系统的发送缓冲区内，即仍然
#    缓存在ngx_lua系统内的数据。NOTE：即使写到系统缓冲区，系统也不一定会将数据发送出去！
#    但ngx.say()和ngx.print()都会产生一个truck。
#    NOTE：虽然ngx_lua采用trucked transfer encoding的方式进行响应，但所有响应数据只构成了一个HTTP响应.
#          如果HTTP响应需要进行多次传输，第一次是HTTP协议，后面传输采用TCP协议即可
#
# 7. tcpsock:send在调用之前需要将pending data都发送出去，ngx.flush(true)强制发送.
#
events{}

http {
    # 创建只读连接
    server {
        location /recv {
            content_by_lua_file "./libs/tcpsock.receive.only.lua";
        }

        location /send {
            content_by_lua_file "./libs/tcpsock.receive.send.lua";
        }

        location /send2 {
            content_by_lua_file "./libs/tcpsock.receive.send2.lua";
        }
    }
}
