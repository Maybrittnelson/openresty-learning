#
# nginx将请求进行分阶段处理，比如rewrite、access、content等阶段;
# ngx_lua允许用户在各个阶段编写lua代码，本质上这些lua代码构成了
# 一个协程, 也是一个事件回调函数。
# 协程通过调用nginx-api-for-lua的函数，可以达到异步非阻塞的效果.
#
# openresty将协程对象分为两类：普通的coroutine和可以被ngx_lua调度的coroutine(也称之为light thread).
# light thread 分为两类：entry thread 和 user thread.
# entry thread: 是指运行rewrite_by_lua, access_by_lua等代码的协程
# user thread: 是通过ngx.thread.spawn或者ngx.thread.create创建的协程
#
# NOTE: the newly-created "light thread" will keep running asynchronously usually at various I/O events.
# 这意味着user thread在yield后，再次出发它运行的源是ngx_lua
# NOTE: 这也是ngx.thread.spawn与coroutine.create协程的最大区别
#
# 由于ngx.thread.spawn创建的协程是由ngx_lua调度的，所以
# 无法调用coroutine.resume的方式进行数据交互, 如下：
# sub_coroutine, val = coroutine.resume(sub_coroutine)
# !!!通过ngx.thread.wait可以获取协程的返回值!!!
#
events{}

http {
    server {
        listen 8000;
        location / {
            rewrite_by_lua_file libs/thread0.lua;
        }
    }

    server {
        listen 8001;
        location / {
            # rewrite handler执行完毕的三种情况:
            #   1. both the "entry thread" and all the user "light threads" terminates
            #   2. 任何light thread发起了重定向（ngx.exec或ngx.redirect）
            #   3. 任何light thread调用ngx.exit主动退出某个handler的执行
            #   4. the "entry thread" terminates with a Lua error. e.g. ngx.sleep('e')
            rewrite_by_lua_file libs/thread1.lua;
            content_by_lua_block {
                ngx.say(ngx.ctx.sum)
                ngx.say(ngx.ctx.sub)
            }
        }
    }

    # "Light threads" are mostly useful for making concurrent
    # upstream requests in a single Nginx request handler
    server {
        listen 8002;
        location / {
            rewrite_by_lua_file libs/thread2.lua;
            content_by_lua_block {
                echo "niaho" ;
            }
        }

        location /sub {
            echo "sub";
        }
    }

    # 1. ngx.print函数不适合跨越两个handler来执行
    #    下面的例子中，content handler不会被执行
    server {
        listen 8003;
        location / {
            rewrite_by_lua_block {
                ngx.print("rewrite")
            }

            # 不会被执行
            content_by_lua_block {
                ngx.log(ngx.INFO, "content")
                ngx.print("content")
            }

            body_filter_by_lua_block {
                ngx.log(ngx.INFO, ngx.arg[1], ngx.arg[2])
                ngx.log(ngx.INFO, ngx.get_phase())  -- body_filter
                -- 由于content handler并不会被执行，所以下面的代码没有任何作用
                -- if ngx.arg[1] == 'content' then
                --    ngx.arg[2] = true
                -- else
                --     ngx.arg[2] = false
                -- end
            }
        }
    }
}
