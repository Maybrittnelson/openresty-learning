#
# set ngx.status before the response header is sent out
# 注意日志的执行顺序
#
events{}

http {
    server {
        location / {
            content_by_lua_block {
                ngx.log(ngx.INFO, "before helloworld")  -- 1
                ngx.say("helloworld")
                ngx.log(ngx.INFO, "after helloworld")   -- 3
            }

            # 修改ngx.status的最后期限了，因为header_filter执行完毕以后，HTTP的头部就会返回给客户端
            # 所以不能在body_filter_by_lua_block中修改ngx.status
            header_filter_by_lua_block {
                ngx.status = ngx.HTTP_CREATED
                ngx.log(ngx.INFO, "hello filter")   -- 2
            }
        }
    }


    server {
        listen 8001;
        location / {
            content_by_lua_block {
                ngx.log(ngx.INFO, "0")
                ngx.say("hello")      -- 比较时需要使用"hello\n"
                ngx.log(ngx.INFO, "3")
                ngx.print("world")
            }

            header_filter_by_lua_block {
                ngx.log(ngx.INFO, "1")
            }

            body_filter_by_lua_block {
                if (ngx.arg[1] == "hello\n") then
                    ngx.log(ngx.INFO, "2", ngx.arg[2])
                elseif (ngx.arg[1] == "world") then
                    ngx.log(ngx.INFO, "4", ngx.arg[2])
                else
                    ngx.log(ngx.INFO, "5", ngx.arg[2])  -- 最后还是会执行一次body_filter_by_lua_block
                end
            }
        }
    }

    # header_filter_by_lua_block只会执行一次
    # 也是修改response status和header的最后时机
    server {
        listen 8002;
        location / {
            rewrite_by_lua_block {
                ngx.header.num = 10;
            }

            content_by_lua_block {
                ngx.header.num = 20;
            }

            header_filter_by_lua_block {
                ngx.log(ngx.INFO, "----")
            }
        }
    }
}
