events{}

http {
    # ngx.ctx with a new Lua table is also supported
    server {
        location / {
            rewrite_by_lua 'ngx.ctx = { foo = 32, bar = 54 }';
            access_by_lua  'ngx.ctx.foo = ngx.ctx.foo + 10';
            content_by_lua 'ngx.say(ngx.ctx.foo)';
        }
    }

    # When being used in the context of init_worker_by_lua*, this table just has the same lifetime of the current Lua handler.
    # lifetime: the current Lua handler, 即它的声明周期就是init_worker_by_lua内.
    # 这么做是合理的，毕竟ctx.table是跟着请求走的，init_worker_by_lua与任何请求无关
    # init_worker_by_lua 'ngx.ctx = {foo=10}';
    server {
        listen 8001;
        location / {
            # NOTE: 虽然set_by_lua_block也是在主线程当中使用，但是它可以有效设置ngx.ctx
            # set_by_lua_block $sum {ngx.ctx = {foo=10}}
            # rewrite_by_lua 'ngx.ctx.foo = ngx.ctx.foo + 1';
            content_by_lua 'ngx.say(ngx.ctx.foo)';
        }
    }
}
