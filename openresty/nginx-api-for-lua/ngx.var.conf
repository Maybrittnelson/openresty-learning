#
# 1. 在xx_by_lua环境下，nginx variables cannot be created on-the-fly.
# 不能凭空创建var.xxx变量，因为ngx.var.xxx是与Nginx变量一一对应的，而Nginx变量是必须在配置期间就被定义的
# NOTICE: 如果向ngx.var.xxx写数据，会导致Lua协程异常退出；如果读ngx.var.xxx数据，那么返回nil
# NOTICE: Nginx未定义的变量，lua输出为nil；Nginx定义但未初始化的变量，Lua输出为空字符串
# NOTICE: 不要通过Nginx变量在各个阶段传递数据，也不是很方便
#
# 2. NOTE: When reading from an Nginx variable, Nginx will allocate memory in the per-request memory pool which is freed only at request termination.
#          在一个请求内，多次调用同一个变量ngx.var.xxx，ngx_lua也会allocate多快临时内存，造成了**内存泄漏**
#          解决办法是使用lua变量或ngx.ctx将它的值缓存在LUA中
#
events{}

http {
    server {
        location / {
            set $val "nihao";
            content_by_lua_block {
                ngx.say(ngx.var.arg_d)  -- 请求参数d不存在时，nil
                ngx.say(ngx.var.mm)     -- nginx没有定义该变量，nil
                ngx.say(ngx.var.val)    -- nginx定义并赋值该变量, nihao
                ngx.say(ngx.var.foo)    -- nginx定义但未赋值, 空字符串


                -- variable "bar" not found for writing
                -- ngx.var.bar = "nihao" -- nginx没有定义该变量，赋值时lua协程abort.
                -- ngx.say(ngx.var.val)
                -- ngx.var.arg_d = 10      -- arg_d是魔法变量，不允许被赋值
            }
        }

        location /foo {
            set $foo "foo";
        }

        # ngx.var.val = nil, nginx中该变量的内容被置位空
        location /bar {
            set $val "nihao";
            rewrite_by_lua_block {
                ngx.var.val = nil
            }
            echo $val;
        }

        # 解释nax.var[1] 是怎么一回事
        # Nginx regex group capturing variables $1, $2, $3, and etc, can be read by this interface as well, by writing ngx.var[1], ngx.var[2], ngx.var[3]
        location ~ /(.*).jpg {
            content_by_lua_block {
                ngx.say(ngx.var[1])
            }
        }
    }
}
