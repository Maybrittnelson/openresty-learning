#
# Header什么时候发送？当ngx.print这类函数被调用时，如果header还没有发送，那么发送头部. 参见：ngx.status.conf
# 因为采用chunked的方式发送响应，所以每次调用ngx.say都会触发body_output_filter的调用.
#
# NOTE：print的内容会先缓存在Openresty，也就是在用户空间；可通过调用ngx.flush函数将数据刷新的内核空间。
# NOTE: Note that ngx.header is not a normal Lua table, 不能进行遍历(ngx.var也不能被遍历)
# For reading request headers, use the ngx.req.get_headers function instead
#
# NOTE: 某些头部的value只接收string形式的, 例如Content-Type
# NOTE: Setting ngx.header.HEADER after sending out response headers will throw out a Lua exception.
#
events{}

http {
    server {
        location / {
            header_filter_by_lua_block {
                -- 这是两个比较特殊的response header
                -- 默认在body_filter_by_lua_block中通过get_headers是获取不到key的
                -- 除非在这里显示的指定
                ngx.header.date   = "date"
                ngx.header.server = "server"
                ngx.header.Foo = {"foo", "bar"}
            }

            body_filter_by_lua_block {
                local h = ngx.resp.get_headers()
                for k, v in pairs(h) do
                    ngx.ctx.key = ngx.ctx.key .. " " .. k
                    ngx.ctx.num = ngx.ctx.num + 1

                    if k == "foo" then
                        for i in ipairs(v) do
                            ngx.ctx.key = ngx.ctx.key .. " " .. v[i]
                        end
                    end
                end

                -- 其中server和date是不能设置的吗？
                -- NOTE: 这时设置ngx.header已经是无效操作了, 而且会产生一个error日志；
                -- 但是response不受影响
                ngx.header.AA = "BB"
                ngx.arg[1] = ngx.ctx.key
                ngx.arg[2] = true
            }

            content_by_lua_block {
                ngx.ctx.key = ""
                ngx.ctx.num = 0
                ngx.say("helloworld")
            }
        }
    }
}
