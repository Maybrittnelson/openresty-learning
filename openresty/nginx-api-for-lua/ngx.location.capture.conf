#
# NOTE: issues a synchronous but still non-blocking nginx subrequest using uri
# NOTE: You should always read the request body (by either calling ngx.req.read_body or configuring lua_need_request_body on) before initiating a subrequest.
# NOTE: This API function (as well as ngx.location.capture_multi) always buffers the whole response body of the subrequest in memory)
#
events{}

http {
    server {
        location /test {
            content_by_lua_block {
                ngx.say(ngx.var.request_body)
            }
        }

        location /sub {
            content_by_lua_block {
                local res = ngx.location.capture("/test")   -- 这个字符串还可以加parameters
                ngx.say(res.status)

                -- header 本身是一个table，如果某个key有多个值，那么value将会是一个array table
                -- ngx.say支持输出array类型的table
                ngx.say(res.header["Content-Type"])

                -- It always buffers the whole response body of the subrequest in memory.
                ngx.print(res.body)

                -- 子请求的响应体被截断：比如网络异常，读超时等
                ngx.say(res.truncated)
            }
        }

        location /foo {
            lua_need_request_body on;
            client_body_buffer_size 1m;
            client_max_body_size    1m;

            content_by_lua_block {
                local res = ngx.location.capture("/test")
                ngx.print(res.body)

                data = ngx.req.get_body_data()
                ngx.say(data)
            }
        }

        # NOTE: 在发送子请求之后，再读取用户的请求体. 貌似没什么区别
        # NOTE: 根据8001端口的写法，如果没有提前read body，那么请求体就无法转发给子请求.
        #       尤其是在POST和PUT请求的情况下, 它们的默认行为就是把请求体转发给子请求，前提是
        #       开发者需要调用lua_need_request_body或ngx.req.read_body来读取数据
        location /bar {
            content_by_lua_block {
                local res = ngx.location.capture("/test")
                ngx.print(res.body)

                ngx.req.read_body()
                data = ngx.req.get_body_data()
                ngx.say(data)
            }
        }
    }

    server {
        listen 8001;
        location /sub {
            content_by_lua_block {
                ngx.say(ngx.req.get_method())

                -- NOTE: val可能为table
                local args = ngx.req.get_uri_args()
                for key, val in pairs(args) do
                    ngx.say(key, "= ", val)
                end

                -- NOTE: val可能为table
                -- NOTE: that subrequests issued by ngx.location.capture inherit all the request headers of the current request by default
                -- 解决办法，如果子请求内发起了proxy_pass指令，则需要在子请求内设置proxy_pass_request_headers off来防止用户的请求头传递到后端
                local headers = ngx.req.get_headers()
                for k, v in pairs(headers) do
                    ngx.say(k, ": ", v)
                end

                ngx.req.read_body()
                data = ngx.req.get_body_data()
                ngx.say(data)

                for k, v in pairs(ngx.ctx) do
                    ngx.say(k, "-> ", v)
                end

                -- NOTE: ngx.var不能被遍历
                for k, v in pairs(ngx.var) do
                    ngx.say(k, "---> ", v)
                end
                ngx.say(ngx.var.foo)
                ngx.var.foo = 100
            }
        }

        location / {
            rewrite_by_lua 'ngx.ctx.val = 10';

            set $foo "foo";
            content_by_lua_block {
                ngx.req.read_body()

                options = {
                    method = ngx.HTTP_GET,      -- 如果是POST或PUT，always_forward_body=false时，也会forward
                    -- body = "self body",
                    always_forward_body=true,
                    args = {name='jacke', age=10},
                    ctx = ngx.ctx,              -- 父子请求之间共享环境变量
                    vars = {foo="bar"}          -- 必须实现定义它
                    -- copy_all_vars = true     -- 输出foo
                }
                res = ngx.location.capture("/sub", options);
                assert(ngx.var.foo == "foo")   -- 与子请求的var变量是完全独立的
                ngx.print(res.body)
            }
        }
    }
}
