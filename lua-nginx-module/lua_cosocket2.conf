#
# 测试目的:
#    获取请求的Method、URI、host，以及响应状态码，并将它们传递给后端服务器
#    输出响应体的内容
#

events{}

http {
    lua_package_path "conf/lib/?.lua;;";

    server {
        listen 80;

        proxy_connect_timeout    30;
        proxy_read_timeout       240;
        proxy_send_timeout       120;
        proxy_buffer_size        16k;
        proxy_buffers            4 64k;
        proxy_busy_buffers_size    128k;
        proxy_temp_file_write_size 128k;

        location / {
            proxy_pass http://localhost:8888;

            set $resp_body "";

            body_filter_by_lua_block {
                ngx.ctx.buffered = (ngx.ctx.buffered or "") .. ngx.arg[1]
                if ngx.arg[2] then
                    ngx.var.resp_body = ngx.ctx.buffered
                end
            }

            log_by_lua_block {
                local function send_status(premature, method, uri, body, upstream_addr, status, respdata)
                    sock = ngx.socket.tcp()
                    sock:settimeout(5)
                    local ok, err = sock:connect("127.0.0.1", 8080)
                    if not ok then
                        return
                    end

                    sock:send(method .. ' ' .. uri .. ' ' .. body .. ' ' .. upstream_addr .. ' ' .. status .. ' ' .. respdata .. '\n')
                    local ok, err = sock:setkeepalive(0, 10)
                    if not ok then
                        ngx.say("failed to keepalive")
                    end
                end

                ngx.timer.at(0, send_status, ngx.var.request_method, ngx.var.uri, ngx.var.request_body, ngx.var.upstream_addr, ngx.var.status, ngx.var.resp_body)
            }
        }
    }

    server {
        listen 8888;
        location / {
            content_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                ngx.print(body)
            }
        }
    }
}
