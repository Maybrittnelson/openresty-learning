#
# NOTICE: Note that ngx.header is not a normal Lua table and as such
# For reading request headers, use the ngx.req.get_headers function instead
# 0. ngx.header 是响应头部，但是不是普通的table。所以遍历整个响应头部时应该采用ngx.resp.get_headers
# 1. value 支持两种形式：string 和 table。而且，当response headers中有Foo: xx1，Foo:xx2时，ngx.header.Foo返回的是table.
# 2. ngx.header.xxx = ngx.resp.get_headers
# 3. 某些头部的value只接收string形式的。
# NOTICE: Setting ngx.header.HEADER after sending out response headers
events{}

http {
    server {
        location / {
            header_filter_by_lua_block {
                -- 这是两个比较特殊的response header
                -- 默认在body_filter_by_lua_block中通过get_headers是获取不到key的
                -- 除非在这里显示的指定
                ngx.header.date   = "date"
                ngx.header.server = "server"
                ngx.header.Foo = {"foo", "bar"}
            }

            body_filter_by_lua_block {
                local h = ngx.resp.get_headers()
                for k, v in pairs(h) do
                    if k == "foo" then
                        for i in ipairs(v) do
                            ngx.ctx.key = ngx.ctx.key .. " " .. v[i]
                        end
                    end
                    ngx.ctx.key = ngx.ctx.key .. " " .. k
                    ngx.ctx.num = ngx.ctx.num + 1
                end

                -- 其中server和date是不能设置的吗？
                -- ngx.arg[1] = h["Content-Type"]
                ngx.arg[1] = ngx.ctx.key
                ngx.arg[2] = true
            }

            content_by_lua_block {
                ngx.ctx.key = ""
                ngx.ctx.num = 0
                ngx.say("helloworld")
            }
        }
    }
}
