worker_processes 3;

events{}

http {
    init_by_lua_block {
        gnum = 10
        gl2 = {num=10}
    }

    init_worker_by_lua_block {
        --[[
            NOTICE: ngx_lua并没有在此时为每一个请求创建一个coroutine，事实上请求和协程也不是一对一的关系
            如果存在rewrite_by_lua它就会创建一个协程，同理如果存在access_by_lua或content_by_lua它也会创建一个协程
            所以这些定义都应该是在LUA的全局环境
        --]]
        gw = 100
        gwl2 = {num=100}
    }

    server {
        # 全局变量被放在模块内
        location /by_lua_file {
            content_by_lua_file "libs/foo.lua";
        }

        location /by_lua_block {
            content_by_lua_block {
                local bar = require "libs/bar"
                bar.num = bar.num + 1
                ngx.say(bar.num)
                ngx.say(ngx.worker.pid())
            }
        }

        # 并没有做到数据累计的效果
        # 主因是请求隔离机制的存在，使得全局变量有种copy-on-write的意味
        # NOTICE：对于引用类型变量，它们被修改时，不同的请求之间还是能看到的
        location /global {
            content_by_lua_block {
                gnum = gnum + 1
                gw = gw + 1
                ngx.say(gnum)
                ngx.say(gw)
                ngx.say(ngx.worker.pid())
            }
        }

        # table类型的变量在更改值的时候，也会影响到其它协程
        # NOTICE: 之所以在并发情况下工作正常，是因为操作这些table的过程不会被中断
        location /gl2 {
            content_by_lua_block {
                gl2.num = gl2.num + 1
                gwl2.num = gwl2.num + 1
                ngx.say(gl2.num)
                ngx.say(gwl2.num)
                ngx.say(ngx.worker.pid())
            }
        }
    }
}
