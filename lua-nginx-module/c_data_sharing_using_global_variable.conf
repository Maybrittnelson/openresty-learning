#
# 通过LUA全局变量在worker的各个routine之间进行数据共享，貌似不是一个好主意
# 目前测试来看，出现了各种奇怪的问题
#
# NOTICE: 由于case1和case2都公用一份LUA code--global.lua
# reload完毕以后，先执行case1，再执行case2时，会导致程序出现500错误
#
events{
}

http {
    lua_package_path "${prefix}?.lua;;";
    server {
        # NOTICE: 当第二个请求到来时，所有的全局变量都被设置为了nil，例如，导致setname调用失败
        location /case1 {
            content_by_lua_block {
                require "libs/global"
                --setname("bob")      -- 第二次被调用时报错，程序返回500
                function test()
                    ngx.say("global name: ", name)  -- 第二次被调用时返回nil
                    ngx.say("global age: ",  age)   -- 即便是放在函数当中也不行
                end
                test()
            }
        }

        # NOTICE：如果全局变量不再content_by_lua_block内使用，即1.只在全局变量所在模块使用；2.在其它模块中（非content_by_lua_block模块）使用
        # 全局变量是起作用的
        location /case2 {
            content_by_lua_block {
                local var = require "libs/global2"
                if var.calc() == 100 then
                    ngx.say("ok")
                else
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say("error")
                end
            }
        }
    }
}
