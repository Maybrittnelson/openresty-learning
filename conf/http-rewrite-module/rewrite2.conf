events{

}

http{
  server {
    #
    # 如果该命令集放置到location当中，返回500(但是并没有这么做)
    # 仔细对比rewrite的pattern部分，你就会发现新跳转的URI是没有重复匹配rewrite指令的
    #
    # 执行该指令就可以进行重定向
    # curl -i localhost/download/dsa/media/aaa.mp3
    #
    #rewrite ^(/download/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 last;
    #rewrite ^(/download/.*)/audio/(.*)\..*$ $1/mp3/$2.ra  last;
    #return  403;

    location /download {
      #
      # 如果是last flag, 那么就会立刻去寻找新的location，结果又匹配到自己，循环十次退出
      # 如果是break指令，那么rewrite模块的指令将不会被继续执行
      # rewrite阶段结束，继续执行后面的内容）仍然是在同一个location内执行
      #
      # If a replacement string includes the new request arguments, the previous
      # request arguments are appended after them. If this is undesired, putting a 
      # question mark at the end of a replacement string avoids having them appended
      #
      # rewrite /download /download/$uri break;
      
      # 
      # 注意flag也只是可选项
      # 这样一来，rewrite期间该模块的所有指令都会被处理；然后进行locationpipei
      # 所以echo指令没有机会执行
      #
      #rewrite /download /download/$uri;
      
      #
      # 如果以http开头，则直接返回URL，这个URL没有进行处理
      # 所以download/$uri两者之间是存在两个斜杠的
      #
      rewrite /download http://localhost/download/$uri;

      #return 403; # 无论是break还是last作为flag，它都没有机会再次运行
      echo nihao;
    }
  }
}
