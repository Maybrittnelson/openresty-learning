#
# regular string location
# ~*: URL不区分大小写（考虑到操作系统的兼容性，设计API时也应该不考虑大小写）
# ~ 区分大小写
#
events{}

http {
    # curl '127.0.0.1:8000/foooooooo'
    server {
        # ~*: 表明后面的表达式是一个正则表达式
        # NOTICE: uri与正则表达式的匹配也并非是完全匹配
        # NOTICE: Nginx按照配置文件的前后顺序，将uri与location的正则表达式进行比较，
        #         一旦匹配成功（正则表达式是uri的前缀），则立刻选定该location
        location ~*  /foo {
            echo "this is regular string /foo location for ($uri)";
        }

        # 下面三个location，没有机会被执行
        location ~* /fooo {
            echo "this is regular string /fooo location for ($uri)";
        }

        location /foo {
            echo "this is prefix string /foo location for ($uri)";
        }

        location /fooo {
            echo "this is prefix string /fooo location for ($uri)";
        }
    }

    # 正则表达式的特殊字符
    # ^$+.*?()
    # ()内部仍然可以直接使用正则表达式的特殊字符
    server {
        listen 8001;
        location ~* ^/foo$ {
            echo "只会匹配foo";
        }

        location /fooo {
            echo "this is prefix string /fooo location for ($uri)";
        }

        # curl '127.0.0.1:8001/'
        location ~ ^/f?$ {
            echo "匹配零个或一个";
        }

        # curl '127.0.0.1:8001/abar'
        location ~* /.+bar {
            echo "除了/bar/外都可匹配";
        }

        # curl '127.0.0.1:8001/bar'
        location ~* /.*bar {
            echo "可以匹配/bar";
        }

        # curl '127.0.0.1:8001/abc.tar'
        location ~* ^/(?<name>.+)\.tar$ {
            echo $name;
        }
    }
}
