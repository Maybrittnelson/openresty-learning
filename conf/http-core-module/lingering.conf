#
# 连接建立过程：
#   server: --LISTEN-------收到后(SYN_RECV)---ACK/SYN----------------收到后(ESTABLISHED)
#                      |                        |                |
#   client: ----------FIN(SYN_SENT)---------------------收到后--ACK(ESTABLISHED)
#
#
# 连接断开过程：
#                              不再发送数据
#   主动断开链接：ESTABLISH--FIN(FIN_STAT_1)-----收到后(FIN_STAT_2)--------------------------------ACK(TIME_WAIT)--------->CLOSED
#                       |                     |                         |            |                  |         (等待足够长时间)
#   被动断开连接：ESTABLISH------------------ACK(CLOSE_WAIT)--------继续发送数据----FIN(LAST_ACK)---------->CLOSED
#                                                                  (不再读取数据)                (不再发送数据)
#
# 大量的client发送大量的短连接，而且client很“不负责任”，不关闭连接。当达到了keep-alive指定的时间后，server端会主动关闭了该连接。
# 此时server端的很多socket就会处于TIME_WAIT状态。
#
# 当server对客户端的数据进行流式处理时，发生错误，server端会发送错误报文并关闭连接。close操作的行为如下：
# 1. 如果套接字的读缓存有数据，则RST(FIN)报文会立即发送至客户端。注意响应端本来期望收到响应的，结果收到了FIN，连接被reset;
# 2. 如果套接字的读缓存没有数据，则RST报文会**APPEND**在套接字写缓存的后面发送过去。
#
# lingering指令就是为了解决第一个问题，close时先关闭写连接; 等待接收，然后丢弃剩余请求报文; 最后关闭读连接。完事再发送FIN连接。
# 即，给上层一段时间，将套接字的读缓存中的数据读完（注意，也许读不完，毕竟客户端期间还可以继续写数据）
#   1. lingering_close alwayse：无条件等待
#   2. lingering_close on:  等待一段时间，直到lingering_time或者lingering_timeout指定的时间。
#   3. lingering_close off; **should not be used under normal circumstances** 。
#
#   lingering_time 和 lingering_timeout的区别：前者给了读取窗口的总时间，后者是一段时间内没有收到任何数据时，就关闭连接.
#
events{}

http {
    # default value
    lingering_close on;

    # nginx发送RST报文前，最长等待读取剩余报文时间
    # ** 剩余报文读取后会被丢弃掉 **
    lingering_time  30s;
    lingering_timeout 5s;

    server {}
}
