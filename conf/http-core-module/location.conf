# 在选择了server以后，Nginx会对URL进行一些调整，解码编码的字符，merge slash，去掉 .或者..
# 接下来就应该选择location了。
# location \/ {} 如果不存在的话，会默认添加。
events {}

http {
  server {
    # 在解码之后，URL调整之后，比如去掉多余的斜杠，去掉..和.等
    # 匹配过程
    #   1. prefix string: 虽然先匹配了prefix string，但是它的优先级并非是最高的，它的优先级在regular之后
    #      之所以先匹配prefix string，是因为它匹配简单，不用浪费太多的CPU
    #      NOTE: prefix string也可以提高它的优先级到regular string.
    #        a. 在prefix string之前添加=，表示exact匹配；
    #        b. 在prefix string之前添加^~，表示一旦有^~的location匹配成功，那么不在进行regular expression的匹配。直接执行该location。
    #
    #   2. regular string：按照regular在配置文件中的顺序匹配，一旦匹配成功，立刻执行该location
    #      正则表达式内容可以用（）进行捕获
    #
    #   3. exact match. 它的优先级是最高的，也是最先被匹配的。由于是完完整整的匹配字符串，所以它并不常用
    #      可以对根目录使用该技能. 这样的location内部当然不能嵌套location
    #
    #   4. 在字符串前加@：说明该location不能直接被用户请求，处理的是内部请求.
    #
    #   如果所有的location都没有匹配到，那么可以默认为匹配到了一个location / {}.
    location / {
      # location 竟然可以嵌套
    }
  }
}
