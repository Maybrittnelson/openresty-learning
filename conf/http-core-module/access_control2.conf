#
# 1. 借助auth_request发送一个子请求
# 2. 在子请求内部，借助ngx_http_access_module, ngx_http_auth_basic_module模块进行认证.
#    也可以借助proxy_pass执行，让后端服务执行更加复杂的认证.
# NOTE: 由于auth_request不支持变量插值，只能通过变量request_uri来获取用户的输入信息.
# 3. 子请求返回以后，通过auth_request_set指令获取Auth server的响应头部.
#
events {}

http {
    # 1. auth_request发送一个子请求
    server {
        location / {
            # 子请求通过location的前缀匹配，匹配到了下一个location。
            # 通过ngx.log的查看发现，auth_request是不支持变量插值的
            # [error] 3724#3724: *4 [lua] content_by_lua(access.conf:29):2: uri is /auth/$uri
            auth_request /auth/$uri; # 发送子请求

        }

        location /auth/ {
            # 默认情况下，log_subrequest off. 即子请求的日志是不会被答应的.
            # 通过openresty的lua模块，解决上面的问题.
            content_by_lua '
                ngx.log(ngx.ERR, "uri is ", ngx.var.uri)
                ngx.log(ngx.ERR, "request is ", ngx.var.request)
                ngx.log(ngx.ERR, "request_uri is ", ngx.var.request_uri)
            ';
        }
    }

    # 2. 子请求内部执行代理工作
    server {
        listen 8001;
        location / {
            auth_request /auth;

            # upstream server会返回一系列的内容，通过$upstream_xxx可以访问得到
            # 也可以给aaa指定一个单纯的字符串
            auth_request_set $aaa $upstream_http_server;
            echo "$aaa";
        }

        location /auth {
            proxy_pass http://localhost:8002;
        }
    }

    server {
        listen 8002;
        location / {
            allow 127.0.0.1;    # deny时直接返回403
            deny all;
            echo nihao;
        }
    }
}
