#
#
# 我在curl命令行参数中加入各种特殊字符，发现以下值得学习的内容：
#
# curl 'localhost?aaa=10&bbb=20'      这是标准的请求头参数，nginx会解析出来。
#
# GET /?bbb=10&aaa=dd#aaa HTTP/1.1
# curl 'localhost?aaa=10#abc&bbb=20'  首先curl是把整个请求都发送过去了，nginx忽略了#后面的内容
#
# curl 'localhost?aaa=10@example.com' 如果出现@字符，那么将@前面认为是username:passwd
#      如果没有冒号，那么前面就都认为是username; @后面是主机名称。最终的请求头Host的值就是@后面的内容
#      具体内容，参见：http-auth-basic-module
#
# curl 'localhost?aaa=10&bbb=20[1-2]' []这是curl认为的特殊字符（因为我们已经用单引号引起来了), 它利用一个
#      长连接发送多次请求，此处bbb=201， 然后发送bbb=202第二次。如果要发送[]字符，需要转义。
#
# crul 'localhost?bbb=10&||aaa=20' 请求头参数是非法形式，nginx解析不出来，因为&后面的||是不能作为变量名称的
#       但是可以作为变量的值
#
events {}

http {
    log_format old '$remote_addr $binary_remote_addr [$time_local] $status $request_time $request_method $body_bytes_sent $bytes_sent '
        '--$request_id" "$scheme" $request" "$http_referer" "$http_content_length" "$http_user_agent" "$content_type" "$sent_http_date" "$request_body_file" "$realpath_root" ';

    # 1. 验证access_log的字段值
    server {
        # remote_addr: 输出的是IP地址的字符串形式, 127.0.0.1
        # document_uri==uri: 当发生内部跳转(也是主请求)时，uri是跳转后的地址.
        # request_uri: 带了参数的URI, 发生内部跳转时该值是不随着改变的
        #
        # binary_remote_addr: 出的是IP地址的二进制形式，\x7F\x00\x00\x01
        # time_local: 显示本地之间, 20/Dec/2017:23:54:04 +0800
        # nginx_version: nginx的版本
        # msec: 以秒数的方式返回当前时间，小数点后三位是经过的毫秒数
        # pid: 打印进程的PID, 这样的一个好处是，我可以知道是哪一个worker处理, 比如测试负载均衡的时候，就是一个选择
        # scheme: http or https
        # server_protocol: http/1.0 or http/1.1
        #
        # request: 请求行，GET / HTTP/1.1
        # request_method: 请求方法，GET
        # http_referer: 请求体的referer头.
        # NOTICE: http是一个充满魔幻的变量，http_content_length, http_user_agent也是可以的
        # content_type: 请求的Content-Type头
        # request_time: 不是请求到来的时间，而是处理请求所花费的时间，精确到毫秒, 0.000
        # host: 目前nginx要求所有的请求必须带有host字段, 所以它等于$http_host
        # hostname: 本机名称
        # arg_xxx(or args or query_string): 充满魔幻的一个变量
        # is_args: “?” if a request line has arguments, or an empty string otherwise
        # request_length: request length (including request line, header, and request body))
        #
        # document_root: 与root命令指定的值相等
        # body_bytes_sent: Nginx一般采用chunked_transfer_encoding的方式传输数据（除非静态资源很小）
        #                  ***chunked的传输方式会占用一些body空间***
        # bytes_sent: 发给客户端的字节总数（包括响应Code、响应头、响应体）
        #
        # status: 响应码, 404
        # sent_http_name: 这个name是可以替代成响应的头部的, ***但是在Log中无法显示***.
        # request_body_file: 作为代理时会在日志中显示
        # realpath_root: 根目录的地址.
        # limit_rate: 拥有同名指令，set $limit_rate 1; 意味着一秒钟传递一个字节
        #
        # connection: nginx启动起来以后，每建立一个新的连接，这个connection的值就会加1
        #             nginx -s reload 并不会清零
        #
        access_log /tmp/access.log old;
        listen 9000;
        location / {
            echo hello;
        }

        # 1.1 日志显示临时文件的路径
        client_body_in_file_only on;    # 确保client上传的所有文件都暂存在代理服务器上
        location /no-show {
            proxy_pass http://localhost:9000/proxied;
        }

        location /proxied {
            echo proxied;
        }

        # 1.2 另外一个充满魔幻的变量
        location /arg {
            echo "arg_aaa   : $arg_aaa";
            echo "args      : $args";   # 未解码
        }
    }

    # 2. requestId, server_xxx
    server {
        access_log /tmp/access.log old;
        listen 9001;
        location /requestId {
            echo $request_id;
            echo "$server_name";    # 没有server_name去指定, 为空
            echo "$server_port";
            echo "$server_addr";
        }
    }

    # 3. server_name指令的应用
    #    connection_requests的应用
    server {
        server_name "localhost";
        location / {
            #
            # 在http 1.1协议中连接默认是长连接
            # connection_requests记录了某一个连接发送的请求个数
            # 注意记录的不是总的请求数，而是一个连接的请求个数
            # NOTE: 只能在一个server内的请求才会被累计
            # curl -v '127.0.0.1:8000/foo' '127.0.0.1:8000'
            #
            echo "connection_requests: $connection_requests";
        }

        location /foo {
            echo foo;
        }
    }

    # NOTICE: 不同的server可以监听同一个端口，只需要设置不同的server_name即可
    server {
        server_name myhost;
        location / {
            error_page 404 =200 /nihao;
        }

        location /nihao {
            echo "request_uri:  $request_uri";      # 原URL
            echo "document_uri: $document_uri";     # /nihao
            echo "uri: $uri";   # /nihao
            echo "$server_name";    # myhost
        }
    }
}
