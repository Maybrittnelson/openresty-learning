#
# server_name支持子域名，location支持子目录方式
# server_name的语法规则与location的不完全一样.
#
events {}

http {
    server {
        # 优先级次序：
        #   1. exact macth
        #   2. wildcard names. 只能使用*通配符，而且通配符只能出现在开始和结束的位置，而且必须以.作为分隔符
        #       2.1 *.xxx 如果匹配多个的话，xxx的长度越高，优先级越高
        #       2.2 xxx.* 如果匹配多个的话，xxx的长度越高，优先级越高
        #       2.3 .example.org 代表了example.org和*.example.org两个
        # 3. regular expression(与location相似)
        #       是以～为正则的标志, 需要^$作为起始标志
        #       正则表达式之间的优先级与在配置文件中的先后顺序一致
        server_name example.org www.example.org;
        server_name mail.*;
        server_name ~ ^(?<user>.+)\.example\.net$;
        server_name ~ "^(?<name>\w\d{1,3}+)\.example\.net$";
        location / {
            echo "frist";
        }
    }

    # NOTE: 如果它放在了third之后，那么该server将不会被访问到
    server {
        #注意.的表示方式
        server_name "~(?<h1>.+)\.example\.org";
        location / {
        echo "second";
        }
    }

    # curl -v -H "Host: 3xx.org" http://127.0.0.1:8000
    server {
        server_name "~^(?<h1>.+)\.org$";
        location / {
            echo "third $h1";
        }
    }

    # curl -v -H "Host: 4.mm" http://127.0.0.1:8000
    server {
        # \w的意思好像是匹配任意字符，包括数字
        # 如果包括了{}, 那么名称就应该用引号引起来
        # () \1 的访问方式也是允许的
        server_name "~^(?<h1>\w{1,3})\.mm$";
        location / {
            echo "four $h1";
        }
    }

    # curl -v -H "Host: _" http://127.0.0.1:8000
    server {
        server_name _;
        location / {
            echo "five";
        }
    }

    server {
        # 如果没有Host字段
        # curl -v -H "Host:" localhost 这样的请求不存在Host字段，nginx直接放回400
        # client sent invalid host header while reading client request headers
        server_name ~max;
        location / {
            echo "six";
        }
    }
}
