events {}

http {
  server {
    #
    # 优先级次序：
    # 1. exact macth
    # 2. wildcard names
    #   只能使用*通配符，而且通配符只能出现在开始和结束的位置，而且必须以.作为分隔符
    #   2.1 *.xxx 如果匹配多个的话，xxx的长度越高，优先级越高
    #   2.2 xxx.* 如果匹配多个的话，xxx的长度越高，优先级越高
    #   2.3 .example.org 代表了example.org和*.example.org两个
    # 3. regular expression
    #   是以～为正则的标志, 需要^$作为起始标志
    #
    # 可以不止指定一个
    # 可以指定IP地址
    #
    server_name example.org  www.example.org;
    #server_name *.example.org;
    server_name mail.*;
    server_name ~^(?<user>.+)\.example\.net$;
    server_name  "~^(?<name>\w\d{1,3}+)\.example\.net$";
    location / {
      echo "frist";
    }
  }
 
  # 如果它放在了third之后，那么该server将不会被访问到 
  server {
    #注意.的表示方式
    server_name "~^(?<h1>.+)\.example\.org$";
    location / { 
      echo "second $h1";
    }   
  }

  server {
    server_name "~^(?<h1>.+)\.org$";
    location / { 
      echo "third $h1";
    }   
  }

  server {
    listen 80 default_server;
    # \w的意思好像是匹配任意字符，包括数字
    # 如果包括了{}, 那么名称就应该用引号引起来
    # () \1 的访问方式也是允许的
    server_name "~^(?<h1>\w{1,3})\.mm$";
    location / { 
      echo "four $h1";
    }   
  }
  
  server {
    # 如果没有Host字段
    # curl -v -H "Host:" localhost 这样的请求不存在Host字段， nginx直接放回400
    # curl -v -H 'Host:""' localhost  这样的请求貌似也没有起到作用，直接选择了default_server
    #
    server_name _;
    location / {
      echo "five";
    }
  }  
}
