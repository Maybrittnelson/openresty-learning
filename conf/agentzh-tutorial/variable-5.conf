#
# nginx.conf 变量
#   1. 请求分类：main request and subrequest
#   main request: 从虚拟主机外部发起的HTTP请求。
#       a. 它是HTTP请求；
#       b. proxy_pass是main request。
#       c. echo_exec和rewrite也是main request.
#       d. NOTICE: 如果发送请求后，对client的HTTP请求失去了控制，那么该请求就是main request。
#       所谓的失去控制，就是它彻底的作为代理，等待响应并返回。
#   subrequest：只限于在一个虚拟主机内部。
#       a. 请求之间可采用任意通信方式，一般是函数调用.
#       b. NOTICE: 子请求处理完毕后会将控制权返回给父请求，它们之间如何交换数据应该是指令的事
#
#   2.  子请求与父请求是否共享变量.
#       a. 一般情况下，它们都拥有各自独立的变量容器:
#       b. 也有例外情况，如ngx_auth_request模块
#
#   3. proxy_pass请求是否能共享变量，不能。
#      NOTICE：内部请求是可以共享变量的，之所以称之为内部请求，就是因为它们共享变量
#

events{}

http {

    # 1. 子请求处理完毕后会将控制权限返回
    server {
        location / {
            echo_location /foo;
            echo_location /bar;
        }

        location /foo {
            echo foo;
        }

        location /bar {
            echo bar;
        }
    }

    # 2.a 主请求和子请求拥有独立的变量容器
    server {
        listen 8001;
        location /main {
            set $var main;
            echo_location /foo;
            echo_location /bar;
            echo "main: $var";
        }

        location /foo {
            echo "foo: $var";   # 输出为空
        }

        location /bar {
            set $var bar;
            echo "bar: $var";
        }
    }

    # 2.b auth_request发起的自请求中父子请求共享变量
    server {
        listen 8002;
        location /main {
            set $var "main";
            # NOTICE: auth_request模块需要手动编译进Nginx
            auth_request /sub;  # auth_request 指令会自动忽略“子请求”的响应体
            echo "main: $var";  # 重新获得了控制权，但是输出为sub。
        }

        location /sub {
            set $var "sub";
            echo "sub: $var";   # 虽然auth_request会把它忽略，但这也许是sub location 不可缺少的指令
        }
    }

    # 3 主请求之间不共享变量，但是rewrite和echo_exec是可以共享变量的
    server {
        listen 8003;
        location / {
            set $mtu 100;
            proxy_pass http://localhost:8004;
        }
    }

    server {
        listen 8004;
        location / {
            # NOTICE: curl localhost:8003
            # 输出为空
            echo $mtu;
        }
    }
}
