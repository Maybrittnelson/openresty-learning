#
# nginx.conf 变量的三种状态：不合法（invalid）、未找到（not found）、已赋值:
# NOTICE：无论变量处于哪种状态，该变量一定被创建了.
#
#   1. 不合法变量：创建后尚未被赋值，也被称为未初始化变量; **返回空字符串**
#      对于未创建的变量和未初始化的变量，nignx都会返回空字符串
#   2. 未找到变量：这是因为Nginx提供了充满魔幻的变量，这些变量如arg_xxx不存在时，应该来如何表达；
#      NOTICE: 变量如果不存在时，是不会调用get方法的。
#      NOTICE: Nginx对它的处理是查找变量时失败，返回空字符串。但是这样就无法与变量值为空字符串的情况，区分开
#      请求：curl 'http://localhost:8080/test?name=' 与 curl 'http://localhost:8080/test' 是无法被区分开的
#   3. LUA对于未找到的变量返回nil, 'localhost:8002?name'这种情况视情况而定
#   4. 解决ngx.var.arg_name表示不准确的问题。
#       curl 'localhost:8002?name' 中ngx.var.arg_name会返回nil;
#       按照HTTP标准，上面的请求被认为name参数被设置为true
#
events{}

http {
    # 1
    server {
        location /foo {
            # 直接发送/foo请求时，就引用了不合法的foo变量
            # NOTICE：还好set指令会给变量设置get方法，get方法会对foo变量进行赋值，为空字符串；
            # 所以，外在的表现就是变量的默认值是空字符串。
            echo "foo = [$foo]";    # 日志输出：using uninitialized "foo" variable.
        }

        location /bar {
            set $foo 32;
            echo "foo = [$foo]";
        }
    }

    # 2
    # curl localhost:8001
    # curl 'localhost:8001?name'
    # curl 'localhost:8001?name='
    server {
        listen 8001;
        location / {
            echo "name=[${arg_name}]";
        }
    }

    # 3
    server {
        listen 8002;
        # curl localhost:8002/foo           # not found
        # curl 'localhost:8002/foo?name'    # not found， **正确行为应该是empty string. 见下一server**
        # curl 'localhost:8002/foo?name='   # empty string
        location /foo {
            content_by_lua_block {
                if ngx.var.arg_name == nil then
                    ngx.say("name: not found")
                else
                    ngx.say("name: [", ngx.var.arg_name, "]")
                end
            }
        }

        location /bar {
            echo_location /mtu;
            echo_location /liverpool;
        }

        location /mtu {
            content_by_lua_block {
               ngx.say(ngx.var.foo)  --  Lua 里面读取**未初始化**的Nginx变量 $foo 时得到的是空字符串
            }
        }

        location /liverpool {
            content_by_lua_block {
               ngx.say(ngx.var.not_found)  -- Lua读取**未创建的变量**时，返回nil字符串
            }
        }
    }

    # 4
    server {
        listen 8003;
        location / {
            # curl localhost:8003           # not found
            # curl 'localhost:8003?name'    # true
            # curl 'localhost:8003?name='   # empty string
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                if args.name == nil then
                    ngx.say("name: not found")
                else
                    ngx.say("name: [", args.name, "]")
                end
            }
        }
    }
}
