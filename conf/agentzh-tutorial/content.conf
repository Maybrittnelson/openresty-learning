#
# content
# 1. 在 rewrite 和 access 这两个阶段，多个模块的配置指令可以同时使用，
# 譬如上例中的 set 指令和 rewrite_by_lua 指令同处 rewrite 阶段，而 deny 指令和 access_by_lua 指令则同处 access 阶段。
# 但不幸的是，这通常不适用于 content 阶段。
#
# 2. 如果没有指定任何content阶段的模块时，那么ngx_index ngx_autoindex ngx_static三个模块将起作用
#   ngx_index 和ngx_autoindex 作用于以/结尾的URL，不是以/结尾的URL直接忽略；ngx_static则刚好相反.
#   ngx_index: 存在index指令，当index指定的文件存在时，发起内部重定向，到$uri/xxx.html。NOTICE：如果指定的文件不存在，将控制权交给ngx_autoindex模块
#   ngx_autoindex：存在autoindex指令，当autoindex off时，返回403；当 autoindex on时，列出该目录；
#   ngx_static: 将xxx.xxx文件作为response body输出。
#
events{}

http {

    #1
    server {
        location / {
            # echo_before_body 和 echo_after_body运行在Nginx的"输出过滤器"中，即在proxy_pass输出内容的时候，执行“输出过滤”
            # 这里“输出过滤”的方法就是在响应体的前后增加内容
            # NOTICE: “输出过滤器”并不属于11个请求处理阶段（毕竟许多阶段都可以通过输出响应体数据来调用“输出过滤器”）
            # NOTICE：之所以不能用echo，就是因为echo和proxy_pass指令所在的模块不是同一个，且它们都是在content阶段被执行
            echo_before_body "before...";
            proxy_pass http://127.0.0.1:8001;   # content阶段执行的指令
            echo_after_body "after...";
        }
    }

    server {
        listen 8001;
        location / {
            echo "server on 8001";
        }
    }

    #2. 测试ngx_index
    # NOTICE: 注意需要index.html文件的存在
    server {
        listen 8002;
        location / {
            # 1. curl  localhost:8002/
            # 2. ngx_index.index指令判断index.html文件存在，于是发起内部重定向。
            # 3. curl  localhost:8002/index.html 将控制权交给了ngx_static，输出文件的内容
        }
    }

    #3. 测试ngx_autoindex
    # NOTICE: 注意需要index.html文件的存在
    server {
        listen 8003;
        location / {
            # 1. curl  localhost:8003/parent/
            # 2. ngx_index.index指令判断index.html文件不存在，于是交给ngx_autoindex模块处理
            autoindex on;
            # 3. 列出当前目录的内容
        }
    }
}
