#
# post-read server-rewrite find-config rewrite post-rewrite
# pre-access access post-access try-files content log
#
# 1. 最主要的三个阶段的执行顺序：rewrite --> access --> content.
#    NOTICE: 通常情况下，模块会将它的指令集中注册在某一个阶段；
# 2. 处于在rewrite阶段的模块有： ngx_rewrite、ngx_set_misc、ngx_lua、ngx_array_var 、 ngx_encrypted_session等
#    NOTICE: 处于rewrite阶段的模块，它们的指令执行顺序是什么？1. 以模块为单位，顺序执行一个个模块的指令；2. 还是以指令为单位，顺序执行所有配置指令？
# 3. 对于上面提到的模块，它们采用第2种方式运行。
# 4. 对于rewrite_by_lua 、more_set_input_headers指令就是运行在rewrite tail阶段
#    NOTICE: 它可以和2中提到的指令一起运行，但是2中的指令会先运行
#    多个rewrite tail指令不能同时配置，因为这两个指令的运行先后顺序不一定.
#

events {
}

http {
    # 1
    server {
        location / {
            echo "$foo";      # content
            set $foo foo;     # rewrite
            allow 127.0.0.1;  # access
            deny all;
        }
    }

    # 3
    server {
        listen 8001;
        location / {
            location / {
                set $num1 10;
                set $num2 20;
                set $a "hello%20world";
                set_unescape_uri $b $a;
                set $c "$b!";
                set_by_lua $sum "return ngx.var.num1 - ngx.var.num2";
                echo $c;        # hello world!
                echo $sum;      # -10
            }
        }
    }

    # 4
    server {
        listen 8002;
        location /test {
            set $value dog;
            more_set_input_headers "X-Species: $value"; # 运行在rewrite tail阶段，注意这并不是一个新的阶段
            set $value cat; # 比more_set_input_headers指令先执行

            echo "X-Species: $http_x_species";
        }
    }
}
