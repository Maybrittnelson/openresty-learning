events{}

http {
  lua_package_path "${prefix}/lua/?.lua";
  server {
    location / {
      content_by_lua_block {
        -- 很简便的的实现Helloworld
        -- ngx.say("helloworld")

        -- lua文件之间的调用
        -- 注意：lua_code_cache功能会将lua代码进行缓存，所以你修改了lua代码以后不会立即生效
        -- 详情参见lua_code_cache(默认是开启的)
        -- user code is loaded once at the first request
        -- 需要执行reload进行重载
        local age = require "libs.people"
        age()
      }
    }

    location /test {
      #
      # agentzh曾经提到过，向rewrite和access阶段，可以同时存在两个handler
      # 不过这两个handler的关系也是一前一后明确的 rewrite 和 rewrite tail阶段
      # 但是在content阶段，就只能有一个handler。
      # 
      # content_by_lua_block 和 proxy_pass 分别属于两个nginx module的指令
      # 所以它们是互斥的。
      # 如何能判断一个模块或一个指令所在的phase
      #
      content_by_lua_block {
        ngx.say("helloworld")
      }
      proxy_pass http://localhost:8080;
    }
  }

  server {
    listen 8080;
    location / {
      echo 8080;
    }
  }
}
