#
# Nginx作为反向代理服务器的同时，也可以作为缓存服务器. Nginx默认不启用缓存功能。
# 需要借助：proxy_cache zone 命令，开启缓存功能
#
# zone:
#   zone这个概念在多个模块内出现，它代表一块缓存，缓存key-value类型的键值对。
#   例如：limit_conn_zone申请的zone用于存储每个client ip的并发连接数.
#         limit_req_zone申请的zone用于存储每个client每秒内发送的请求个数.
#   Nginx作为缓存服务器，需要缓存每个URL的内容，所在的文件的属性（包括路径）
#
# NOTE: 默认的cache key不单包括完整的URL，还包括parameters
# proxy_cache_key: 自定义Key的形式，默认值：$scheme$proxy_host$uri$is_args$args;
#
# NOTE: 源服务器总是会被缓存到临时目录，然后rename到缓存目录，这两个目录最好在一个文件系统内
# proxy_temp_path /spool/nginx/proxy_temp 1 2;  # 指定了两级缓存, 1和2的含义，参见西面.
#
# NOTE: 没有proxy_cache_zone指令，使用proxy_cache_path即可
# proxy_cache_path: 1. 设置缓存目录，缓存文件名是MD5(key); 2. 设置缓存文件的层级
# 结构1:2, 表示层级为2级，第一级一个字符，第二级两个字符, c/29/xx...xx29c; 3. 使用
# keys_zone指定zone的名称和内存大小.
# NOTE: 缓存过期问题
# inactive: 默认值是10分钟，**在10分钟内**, 某个KEY没有被访问，就删除该条目;
# max_size：指定缓存文件占用的文件系统的总大小，进程cache manager会监控它的大小，
# 一旦超过，那么它就会删除最少被使用的文件。
#
# NOTE: proxy_cache_valid是必不可少的.
# proxy_cache_valid 200 302 404 10m; 1. 缓存行为是由源服务器的Response Code决定；2. 指定了缓存有效期
#
events{}

http {
    # NOTE: 如果源服务器的资源有变动，默认情况下服务器是无法感知到的.
    proxy_cache_valid 200 302 404 10m;
    proxy_cache_path /tmp/temp levels=1:2 keys_zone=cache1:100m inactive=100m max_size=10g;
    server {
        location / {
            proxy_cache cache1;
            proxy_pass http://localhost:8001;
        }

    }

    server {
        listen 8001;
    }
}
