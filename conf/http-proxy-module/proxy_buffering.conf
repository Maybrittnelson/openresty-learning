#
# Nginx作为反向代理服务器，有两种方式将proxied server的response返回给客户端。
#
# 同步方式：监听nginx-->proxied server的套接字，一旦有数据到来，Nginx会将它读取到内存
# NOTE: 内存大小由指令proxy_buffer_size指定。Nginx的事件处理函数会将write到客户端。
# NOTE: 这里的write是同步操作. client接收不完响应，Nginx 和 proxied server之间的连接就不能断开
#
# NOTE：默认的处理方式
# 异步方式：监听nginx-->proxied server的套接字，缓存proxied server的整个response。Nginx在第一次
# 收到proxied server的数据后，会调用write进行异步写。
# 当write成功后，Nginx也会收到事件通知，继续从内存或磁盘获取数据，继续进行异步写
#
# NOTE: proxy_buffering的好处是client-->Nginx和Nginx-->proxied_server之间的连接解耦。
# Nginx 和 proxied server 之间的连接可以快速回收，并重复利用。
# 尤其是proxied server是多线程或多进程的工作方式时，proxy_buffering是对后端的一种很好的保护
#
# NOTE: 请求处理完毕后，Nginx会删除临时文件
#
events{}

# 以下值都为默认值
http {
    # 小于72k的响应都会被换在内存
    proxy_buffering on;
    proxy_buffer_size 1024;
    proxy_busy_buffers_size 2048;
    # 为每一个请求分配的可用内存空间: 3*1024 + 1024
    # 其中2048个字节用于发送响应到client，剩余用于读取proxied server响应。
    proxy_buffers 3 1024;
    #proxy_buffer_size 8k;
    #proxy_buffers 8 8k;
    #proxy_busy_buffers_size 16k;

    # Nginx默认的临时目录，proxy_temp是一个相对路径，所以与conf目录同级
    proxy_temp_path /tmp/temp;
    # 设置临时文件的最大值
    proxy_max_temp_file_size 1024m;
    # 设置一次写文件操作的数据量.
    proxy_temp_file_write_size 16k;
    server {
        location / {
            proxy_pass http://127.0.0.1:8001;
        }
    }

    server {
        listen 8001;
        location / {
        }
    }
}
