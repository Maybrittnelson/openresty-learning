#
# 惊群效应(thundering herd problem):
# see https://en.wikipedia.org/wiki/Thundering_herd_problem for more information
# accept_mutex on: 等待事件的worker进程将会被轮流唤醒;
# accept_mutex on实现原理：worker进程间有一把锁，只有获取该锁的worker才会接收用户的请求；
# 获取锁失败的worker不会被Block住，而是等待accept_mutex_delay事件后，再次尝试；
#
# accept_mutex off: 等待事件的worker进程全部会被唤醒;
# accept_mutex off原理: master进程创建监听套接字，fork子进程(worker processes), 子进程监听套接字接收请求。存在惊群效应
#
# SO_REUSEPORT: Linux系统在创建监听套接字时，可以使用SO_REUSEPORT选项，这样多个worker进程可以
#               同时监听在一个端口上。具体讲请求派发给哪个worker是由内核决定的.
#               所以使用SO_REUSEPORT后，就不用再担心惊群效应了.
#
# 性能测试参见：https://m.oschina.net/blog/420822 for more comparision
#
# 由于Nginx中worker的数量与CPU的数量相同，同时唤醒所有的worker进程对性能也没有什么影响？反而在并发请求量大的时候，
# 提高了吞吐量: http://huoding.com/2013/08/24/281
#

events {
  # accept_mutex on;
  accept_mutex off;
}

http {
  server {
    listen 8000;
    location / {
      echo "OK";
    }
  }
}
