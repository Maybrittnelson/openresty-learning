worker_processes 2;

events {
  #
  # prevent Thundering_herd_problem
  # see https://en.wikipedia.org/wiki/Thundering_herd_problem for more information
  #
  # three kind of related settings: accept_mutex on; accept_mutex off; reuseport; 
  # accept_mutex on: there is lock, every worker will try to get it(but not blocked)
  # SO_REUSEPORT Option (in listen directive) on : the system will assign the connection to one of socket(linux 3.9+)
  # accept_mutex off:Once there is a new connection, all processes(all listeners) will try to get it(Thundering_herd_problem)
  # see https://m.oschina.net/blog/420822 for more comparision
  #
  # Maybe turn it off to improve the performance(not sure, use wrk to verify it)
  # http://huoding.com/2013/08/24/281
  #
  # the difference.
  # try to get to know : whether using round-robin to distribute new connections(foolish). 
  # To verify it, I tried to modify the log format and add the worker-ID to every log, But I failed.
  # Think about it twice, we have known Thundering_herd_problem, so round-round is impossible.
  # 
  # we use a Modern Http benchmark toll : wrk(https://github.com/wg/wrk)
  # ./wrk -t12 -c400 -d30s http://127.0.0.1
  #
  accept_mutex off;

  # the interval of trying to get accept lock
  accept_mutex_delay 500ms;
}

http {
  server {
    location / {
      echo "OK";
    }
  }
}
