#
# 源服务器返回的响应头不带 "Vary: Accept-Encoding"
#
#   1. 无论客户端请求包头中是否有"Accept-Encoding: gzip, deflate", Nginx只会缓冲一份对象。
#   2. 如果第一个请求包头中带有"Accept-Encoding: gzip, deflate", 在对源服务器的请求会返回gzip压缩过的对象。
#   Nginx将此压缩对象缓存。此后，其它客户端请求的包头中无论带不带"Accept-Encoding: gzip, deflate"，Nginx都会返回此压缩对象。
#   3. 如果第一个请求包头中不带"Accept-Encoding: gzip, deflate", 在对源服务器的请求会返回非gzip压缩的对象。
#   Nginx将此非压缩对象缓存。由于Nginx发现source server返回的内容未压缩，而Nginx本身的压缩开关被打开，所以会进行压缩并返回给客户端.
#
#   see http://ialloc.org/posts/2012/08/05/how-nginx-gzip-works/
#
#   关于二次压缩的问题：由于Nginx缓存时会将source server的响应头也缓存下来，所以它很清楚source server的响应体是否已经被压缩。
#   所以，不存在二次压缩的问题(验证过).
#
events{}

http {

    # proxy server和source server都启用了压缩功能
    gzip on;
    default_type  text/html;
    gzip_types text/* text/plain;
    proxy_cache_path /tmp/temp levels=1:2 keys_zone=cache1:100m inactive=100m max_size=10g;

    server {
        location / {
            # proxy和source server之间默认采用HTTP 1.0协议进行通信
            # gzip_http_version(我们没设置)的默认值1.1，如果通信协议是HTTP1.0，则不进行压缩
            # 所以，如果不修改HTTP version。source server到proxy server的响应时不会进行压缩的.
            proxy_http_version 1.1;
            proxy_cache cache1;
            proxy_cache_valid 200 204 301 302 10m;
            proxy_pass http://localhost:8001;
        }
    }

    # curl -v 127.0.0.1:8001 -o /tmp/aaa
    # d73b04b0e696b0945283defa3eee4538  原文的MD5
    # curl -v -s -H "Accept-Encoding:gzip" 127.0.0.1:8001 -o /tmp/aaa
    # 97c704e7c0c76611f894c75c8dd134bf 压缩后的MD5
    server {

        listen 8001;
        location / {
            echo "helloworld";
        }
    }
}
