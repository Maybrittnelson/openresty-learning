events{}
# 设计返回“不合法”这一特殊值的例子是困难的，
# 因为我们前面在 （七） 中已经看到，由 set 指令创建的变量在未初始化时确实是“不合法”，
# 但一旦尝试读取它们时，Nginx 就会自动调用其“取处理程序”，
# 而它们的“取处理程序”会自动返回空字符串并将之缓存住。于是我们最终得到的是完全合法的空字符串
http {
  server {
    location / {
      #
      # 如何区分变量的三种状态：invalid, not found, empty string
      # invalid: 使用未初始化的变量
      # not found: arg_xxx找不到
      #
      # invalid --> 触发get handler, 注意not found并不会触发
      # Nginx 的“变量插值”引擎自动把“找不到”给忽略了。
      # 所以利用nginx原生的方法，是无法区分变量的三种特殊状态的
      #
      # curl localhost?name=
      # curl localhost
      # curl localhost?name
      # $arg_name 变量仍然读出“找不到”这个特殊值，估计这是http-code-module的行为, 返回missing
      #
      content_by_lua '
          if ngx.var.arg_name == nil then
            ngx.say("name: missing")
          else
            ngx.say("name: [", ngx.var.arg_name, "]")
          end
        ';
    }
  }
}
